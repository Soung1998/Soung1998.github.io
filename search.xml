<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[java基础-泛型]]></title>
    <url>%2F2019%2F03%2F07%2Fjava%E5%9F%BA%E7%A1%80--%E6%B3%9B%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[泛型定义Java 泛型（generics）是 JDK 5 中引入的一个新特性, 泛型提供了编译时类型安全检测机制，该机制允许程序员在编译时检测到非法的类型。泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。菜鸟教程链接 个人理解 常用于配合集合类型使用，使得类和方法可接受不同的数据类型，并且在编译时候提供纠错机制 简单举例在一个简单的Box类中只能接收String类型的参数，代码如下：12345public class Box &#123; private String object; public void set(String object) &#123; this.object = object; &#125; public String get() &#123; return object; &#125;&#125; 而使用泛型之后，该类可以接收各种无限制类型的参数，代码如下：12345public class Box&lt;T&gt; &#123; //其中T代表可以装入的无限制的参数 private T t; public void set(T t) &#123; this.t = t; &#125; public T get() &#123; return t; &#125;&#125; 如此该类可以得到复用，我们可以将T替换成任何我们想要的类型：123Box&lt;Integer&gt; integerBox = new Box&lt;Integer&gt;();Box&lt;Double&gt; doubleBox = new Box&lt;Double&gt;();Box&lt;String&gt; stringBox = new Box&lt;String&gt;(); （注：使用泛型方法注意边界符） 类型通配符1、无限制接收参数类型通配符一般是使用?代替具体的类型参数。例如 List&lt;?&gt; 在逻辑上是List,List 等所有List&lt;具体类型实参&gt;的父类。1234567891011121314151617181920212223import java.util.*; public class GenericTest &#123; public static void main(String[] args) &#123; List&lt;String&gt; name = new ArrayList&lt;String&gt;(); List&lt;Integer&gt; age = new ArrayList&lt;Integer&gt;(); List&lt;Number&gt; number = new ArrayList&lt;Number&gt;(); name.add("icon"); age.add(18); number.add(314); getData(name); getData(age); getData(number); &#125; public static void getData(List&lt;?&gt; data) &#123; System.out.println("data :" + data.get(0)); &#125;&#125; 输出结果为：123data :icondata :18data :314 2、类型通配符上限（过滤部分参数）通过形如List来定义，如此定义就是通配符泛型值接受Number及其下层子类类型123456789101112131415161718192021222324252627import java.util.*; public class GenericTest &#123; public static void main(String[] args) &#123; List&lt;String&gt; name = new ArrayList&lt;String&gt;(); List&lt;Integer&gt; age = new ArrayList&lt;Integer&gt;(); List&lt;Number&gt; number = new ArrayList&lt;Number&gt;(); name.add("icon"); age.add(18); number.add(314); //getUperNumber(name);//1 getUperNumber(age);//2 getUperNumber(number);//3 &#125; public static void getData(List&lt;?&gt; data) &#123; System.out.println("data :" + data.get(0)); &#125; public static void getUperNumber(List&lt;? extends Number&gt; data) &#123; System.out.println("data :" + data.get(0)); &#125;&#125; 输出结果：12data :18data :314 3、类型通配符下限通过形如 List&lt;? super Number&gt;来定义，表示类型只能接受Number及其三层父类类型，如Objec类型的实例。]]></content>
      <tags>
        <tag>java基础</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用GitPages+Hexo搭建并开通博客]]></title>
    <url>%2F2019%2F03%2F05%2F%E4%BD%BF%E7%94%A8GitPages-Hexo%E6%90%AD%E5%BB%BA%E5%B9%B6%E5%BC%80%E9%80%9A%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[博客制作总结参考B站教学视频手把手教你搭建属于自己的hexo+github博客使用Next主题来进行优化改造 1、工具准备：node.js和Git的安装2、安装 Sublime text 3作为编辑各种文件的工具 Sublime text 3 下载地址 3、创建GitHub仓库 Repository name：注册用户名.github.io（.github.io为强制要求） Description（仓库描述）：选填。 Public：勾选，表示可以供他人访问。 Initialize this repository with a README：可选。最后点击 create repository 即可。 4、配置GitHubSSH将本地项目部署到GitHub，修改站点下的_config.yml文件1234deploy: type: git repo: git@github.com:Soung1998/Soung1998.github.io.git branch: master 5、常用Git命令（备忘）1234hexo clean //有时候出调试没反应可以尝试清除缓存hexo s //打开服务hexo g //再键入hexo d 为将本地项目更新部署到GitHub上hexo d 6、Next主题使用这里采用使用比较多的主题：NexT主题。参考博客的第二个视频。]]></content>
      <categories>
        <category>博客制作</category>
      </categories>
      <tags>
        <tag>分享</tag>
        <tag>博客制作</tag>
      </tags>
  </entry>
</search>
